    const nameInputChangeHandler = e => {
        setEnteredName(e.target.value);
        //shouldn't use the enteredName, because the state is scheduled and not processed immediately
        //old state will be used if we use enteredName
        if (e.target.value.trim() !== '') {
            setEnteredNameIsValid(true);
        }
    }



    //----------------->>>>SimpleInput comp before reusable hook<<<<<-------------------
    import {useEffect, useState} from "react";
    import "../index.css";

    const SimpleInput = (props) => {
        const [enteredName, setEnteredName] = useState('');
        const [enteredNameTouched, setEnteredNameTouched] = useState(false);

        const [enteredEmail, setEnteredEmail] = useState('');
        const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);

        const [formIsValid, setFormIsValid] = useState(false);

        const enteredNameIsValid = enteredName.trim() !== '';
        const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;

        const enteredEmailIsValid = enteredEmail.trim().includes('@');
        const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;

        useEffect(() => {
            if (enteredNameIsValid && enteredEmailIsValid) setFormIsValid(true);
            else setFormIsValid(false);
        }, [enteredNameIsValid, enteredEmailIsValid]);

        const nameInputChangeHandler = e => {
            setEnteredName(e.target.value);
        }

        const emailInputChangeHandler = e => {
            setEnteredEmail(e.target.value);
        }

        const nameInputBlurHandler = e => {
            setEnteredNameTouched(true);
        }

        const emailInputBlurHandler = e => {
            setEnteredEmailTouched(true);
        }

        const formSubmissionHandler = e => {
            e.preventDefault();

            setEnteredNameTouched(true);

            if (!enteredNameIsValid) {
                return;
            }

            setEnteredName('');
            setEnteredEmail('');
            setEnteredNameTouched(false);
            setEnteredEmailTouched(false);
        }

        const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';

        return (
            <form onSubmit={formSubmissionHandler}>
                <div className={nameInputClasses}>
                    <label htmlFor='name'>Your Name</label>
                    <input
                        type='text'
                        id='name'
                        onChange={nameInputChangeHandler}
                        onBlur={nameInputBlurHandler}
                        value={enteredName}
                    />
                    {nameInputIsInvalid &&
                        <p className='error-text'>Name field is required!!</p>
                    }
                    <label htmlFor='email'>Your email</label>
                    <input
                        type='email'
                        id='email'
                        onChange={emailInputChangeHandler}
                        onBlur={emailInputBlurHandler}
                        value={enteredEmail}
                    />
                    {emailInputIsInvalid &&
                        <p className='error-text'>e-mail field is required!!</p>
                    }
                </div>
                <div className="form-actions">
                    <button disabled={!formIsValid}>Submit</button>
                </div>
            </form>
        );
    };

    export default SimpleInput;


    //----------------->>>>use-input hook<<<<<-------------------

    const [enteredValue, setEnteredValue] = useState('');
    const [isTouched, setIsTouched] = useState(false);